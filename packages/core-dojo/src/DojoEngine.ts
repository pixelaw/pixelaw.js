import {NAMESPACE, RestTileStore, WsUpdateService, createDialog} from "@pixelaw/core"
import type { App,  Engine, EngineStatus, Pixel, PixelStore, Position} from "@pixelaw/core"
import { type DojoStuff, dojoInit } from "./DojoEngine.init.ts"
import { DojoInteraction } from "./DojoInteraction.ts"
import DojoSqlPixelStore from "./DojoSqlPixelStore.ts"
import { schema } from "./generated/models.gen.ts"
import getParamsDef, { generateDojoCall } from "./utils/paramsDef.ts"
 
import type {DojoConfig} from "@/types.ts";
import type { AppStore, TileStore, UpdateService } from "@pixelaw/core"
import type { Connector } from "@starknet-react/core"
import type { Account } from "starknet"
import { DojoAppStore } from "./DojoAppStore.ts"

export class DojoEngine implements Engine {
    pixelStore: PixelStore = null!
    tileStore: TileStore = null!
    appStore: AppStore = null!
    updateService: UpdateService = null!
    status: EngineStatus = "uninitialized"
    config: DojoConfig = null!
    dojoSetup: DojoStuff | null = null
    account: Account | null = null

    async init(config: DojoConfig) {
        this.config = config
        try {
            // Setup Dojo
            this.dojoSetup = await dojoInit(this.config, schema)
            this.status = this.dojoSetup ? "ready" : "error"

            // Setup AppStore
            this.appStore = new DojoAppStore(this.dojoSetup)

            // Setup PixelStore
            this.pixelStore = new DojoSqlPixelStore(this.dojoSetup!.sdk!)

            // Setup UpdateService
            this.updateService = new WsUpdateService(config.serverUrl)

            // Setup TileStore
            this.tileStore = new RestTileStore(config.serverUrl)
        } catch (error) {
            console.error("Dojo init error:", error)
        }
    }

    handleInteraction(app: App, pixel: Pixel, color: number): DojoInteraction {
        const result = new DojoInteraction()

        // TODO maybe we want to do more if no app?
        if (!app) return result

        if (!app.plugin) {
            // Autogenerated Interaction dialog and/or actions
            const pixelAction = pixel?.action ? pixel.action : "interact"

            const contractName = `${app.name}_actions`
            const position: Position = { x: pixel.x, y: pixel.y }

            const params = getParamsDef(this.dojoSetup.manifest, contractName, pixelAction, false)

            const action = (params) => {
                console.log("params", params)

                const dojoCall = generateDojoCall(
                    this.dojoSetup.manifest,
                    params,
                    contractName,
                    pixelAction,
                    position,
                    color,
                )
                this.dojoSetup.provider
                    .execute(this.account!, dojoCall, NAMESPACE, {})
                    .then((res) => {
                        console.log("dojocall after exec", res)
                        // TODO animate "flickering" of the pixel that was modified?
                        // pixelStore.setPixelColor(clickedCell, hexRGBtoNumber(color))
                        // pixelStore.setCacheUpdated(Date.now())
                    })
                    .catch((error) => {
                        console.error("Error executing DojoCall:", error)
                        // Handle the error appropriately here
                    })
            }

            if (params.length) {
                result.dialog = createDialog(action, params)
                result.action = action
            } else {
                // No dialog, so we execute the interaction immediately
                action(params)
            }
        } else {
            // TODO Load interaction from somewhere else (experimental)
        }

        return result
    }

    async setWallet(wallet: unknown){

    }
}
